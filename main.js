const userData = {
	USD: 1000,
	EUR: 900,
	UAH: 15000,
	BIF: 20000,
	AOA: 100
};

const bankData = {
    USD: {
        max: 3000,
        min: 100,
        img: 'üíµ'
    },
    EUR: {
        max: 1000,
        min: 50,
        img: 'üí∂'
    },
    UAH: {
        max: 0,
        min: 0,
        img: 'üí¥'
    },
    GBP: {
        max: 10000,
        min: 100,
        img: 'üí∑'
    }
}
const showBalance = confirm('–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç–∫–∏?');
function getMoney() {
    return new Promise((resolve, reject) => {
        if (showBalance === true) {
            const userCurrencies = Object.keys(userData);
            const selectedCurrency = prompt(`–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É (${userCurrencies.join(', ')}):`);
            if (userCurrencies.includes(selectedCurrency)) {
                console.log(`–ë–∞–ª–∞–Ω—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—å: ${userData[selectedCurrency]} ${selectedCurrency}`);
                resolve();
            } else {
                alert('–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É –≤–∞–ª—é—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
                getMoney().then(resolve).catch(reject);
            }
        } else {
            const userCurrencies = Object.keys(userData);
            const bankCurrencies = Object.keys(bankData).filter(currency => bankData[currency].max > 0);
            const availableCurrencies = userCurrencies.filter(currency => bankCurrencies.includes(currency));

            if (availableCurrencies.length === 0) {
                console.log('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞–ª—é—Ç –¥–ª—è –∑–Ω—è—Ç—Ç—è.');
                resolve();
                return;
            }

            const selectedCurrency = prompt(`–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –∑–Ω—è—Ç—Ç—è (${availableCurrencies.join(', ')}):`);
            if (availableCurrencies.includes(selectedCurrency)) {
                const maxWithdrawal = Math.min(bankData[selectedCurrency].max, userData[selectedCurrency]);
                const minWithdrawal = bankData[selectedCurrency].min;
                const withdrawalAmount = +prompt(`–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∑–Ω—è—Ç—Ç—è (${minWithdrawal} - ${maxWithdrawal}):`);

                if (withdrawalAmount < minWithdrawal) {
                    console.log(`–í–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞ –º–µ–Ω—à–∞ –∑–∞ –¥–æ—Å—Ç—É–ø–Ω—É. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–Ω—è—Ç—Ç—è: ${minWithdrawal}`);
                    reject(new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—É–º–∞ –∑–Ω—è—Ç—Ç—è'));
                } else if (withdrawalAmount > maxWithdrawal) {
                    console.log(`–í–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞ –±—ñ–ª—å—à–∞ –∑–∞ –¥–æ—Å—Ç—É–ø–Ω—É. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–Ω—è—Ç—Ç—è: ${maxWithdrawal}`);
                    reject(new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—É–º–∞ –∑–Ω—è—Ç—Ç—è'));
                } else {
                    console.log(`–û—Ç –í–∞—à—ñ –≥—Ä–æ—à—ñ ${withdrawalAmount} ${selectedCurrency} ${bankData[selectedCurrency].img}`);
                    resolve();
                }
            } else {
                reject(new Error('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–∞–ª—é—Ç–∞'));
            }
        }
    })
}

getMoney()
    .then(() => console.log('–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞'))
    .catch(error => console.error(`–ü–æ–º–∏–ª–∫–∞: ${error.message}`));